# lsp settings {{{
[[plugins]]
repo = "neovim/nvim-lspconfig"
on_event = "BufEnter"
hook_source = """
lua << EOF
local nvim_lsp = require('lspconfig')
local on_attach = function (client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
  
  local opts = { noremap=true, silent=true }
    buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_linw_diagnostics()<CR>', opts)
    buf_set_keymap('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
end

nvim_lsp.texlab.setup{}

local lsp_installer = require("nvim-lsp-installer")
lsp_installer.on_server_ready(function(server)
  local opts = {}
  opts.on_attach = on_attach
  server:setup(opts)
  vim.cmd [[ do User LspAttachBuffers ]]
end)

EOF
"""

[[plugins]]
repo = "williamboman/nvim-lsp-installer"
on_source = "nvim-lspconfig"
# }}}

# ddc.vim {{{
[[plugins]]
repo = "Shougo/pum.vim"

[[plugins]]
repo = "vim-denops/denops.vim"

[[plugin]]
repo = "matsui54/denops-popup-preview.vim"
on_source = "ddc.vim"
hook_source = '''
call popup_preview#enable()
'''

[[plugin]]
repo = "matsui54/denops-signature_help"
on_source = "ddc.vim"
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = "Shougo/ddc-nvim-lsp"
#depends = ["ddc.vim", "nvim-lspconfig"]
on_source = "ddc.vim"

[[plugin]]
repo = "Shougo/ddc-converter_remove_overlap"
on_source = "ddc.vim"

[[plugin]]
repo = "Shougo/ddc-sorter_rank"
on_source = "ddc.vim"

[[plugin]]
repo = "Shougo/ddc-matcher_head"
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-around"
#depends = ["ddc.vim"]
on_source = "ddc.vim"

# }}}

# python {{{
[[plugins]]
repo = 'andviro/flake8-vim'
on_ft = ['python']

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = ['python']

#[[plugins]]
#repo = 'davidhalter/jedi-vim'
#on_ft = ['python']
#hook_add = '''
#leth g:jedi#force_py_version = 3
#'''

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python']
# }}}

# golang{{{
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
if has('win32')
    let g:go_bin_path = 'C:\Users\caffeine\go\bin\'
elseif has('unix')
    let g:go_bin_path = $HOME . '/go/bin/'
endif
'''# }}}

# Crystal{{{
[[plugins]]
repo = 'rhysd/vim-crystal'
on_ft = ['crystal', 'ecrystal']
# }}}

# fsharp{{{
#[[plugins]]
#repo = 'fsharp/vim-fsharp'
#on_ft = ['fsharp']

[[plugins]]
repo = 'adelarsq/neofsharp.vim'
on_ft = ['fsharp']
# }}}

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'elm', 'gohtmltmpl', 'php']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['tsx', 'jsx']

[[plugins]]
repo = 'andys8/vim-elm-syntax'
on_ft = ['elm']

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

[[plugins]]
repo ='vimoutliner/vimoutliner'

[[plugins]]
repo = "jceb/vim-orgmode"
on_ft = ["org"]

[[plugins]]
repo = "hsitz/vimorganizer"
on_ft = ["org"]

[[plugins]]
repo = 'reasonml-editor/vim-reason-plus'
on_ft = ['reason']

[[plugins]]
repo = 'tokorom/vim-review'
on_ft = ['review']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']

[[plugins]]
repo = 'sudar/vim-arduino-syntax'
on_ft = ['arduino']

[[plugins]]
repo = 'elixir-editors/vim-elixir'
on_ft = ['eelixir', 'elixir']

[[plugins]]
repo = 'bsed/vim-dlang'
on_ft = ['d']

[[plugins]]
repo = "mattn/sonictemplate-vim"
hook_add = '''
let g:sonictemplate_vim_template_dir = [
    \ '~/.config/nvim/sonictemplate'
    \]
'''

